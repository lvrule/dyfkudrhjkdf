import telebot
from telebot import types
from datetime import datetime, timedelta
import sqlite3
import matplotlib.pyplot as plt
from apscheduler.schedulers.background import BackgroundScheduler
import os

TOKEN = "8387920808:AAHbBDxyOA2dJUYulaQUyPZRmY1sxtv0zes"
bot = telebot.TeleBot(TOKEN)
scheduler = BackgroundScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            videos_done INTEGER DEFAULT 0,
            practices_done INTEGER DEFAULT 0,
            tests_done INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS progress_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            videos_done INTEGER,
            practices_done INTEGER,
            tests_done INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_confirmation_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
    return markup

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", "üìà –ì—Ä–∞—Ñ–∏–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    return markup

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    conn.close()
    return {
        "videos": {"done": data[1], "total": 128},
        "practices": {"done": data[2], "total": 50, "check_days": 2},
        "tests": {"done": data[3], "total": 2}
    } if data else None

def update_user_data(user_id, field, value):
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (value, user_id))
    conn.commit()
    conn.close()
    log_progress(user_id)

def log_progress(user_id):
    data = get_user_data(user_id)
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO progress_history (user_id, date, videos_done, practices_done, tests_done)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, datetime.now().strftime("%Y-%m-%d"), data["videos"]["done"], data["practices"]["done"], data["tests"]["done"]))
    conn.commit()
    conn.close()

# –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
def calculate_time(user_id):
    data = get_user_data(user_id)
    end_date = datetime(2024, 9, 30)  # –£–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É
    today = datetime.now()
    days_left = (end_date - today).days

    videos_left = data["videos"]["total"] - data["videos"]["done"]
    practices_left = data["practices"]["total"] - data["practices"]["done"]
    tests_left = data["tests"]["total"] - data["tests"]["done"]

    video_time = videos_left * 5
    practice_time = practices_left * 25
    test_time = tests_left * 10
    total_time_min = video_time + practice_time + test_time

    check_days = practices_left * data["practices"]["check_days"]
    effective_days = max(1, days_left - check_days)
    daily_min = total_time_min / effective_days

    return {
        "days_left": days_left,
        "effective_days": effective_days,
        "daily_min": daily_min,
        "total_time_hours": total_time_min / 60,
        "videos_left": videos_left,
        "practices_left": practices_left,
        "tests_left": tests_left
    }

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_progress_chart(user_id):
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT date, videos_done, practices_done, tests_done 
        FROM progress_history 
        WHERE user_id = ? 
        ORDER BY date
    ''', (user_id,))
    data = cursor.fetchall()
    conn.close()

    if not data:
        return None

    dates = [row[0] for row in data]
    videos = [row[1] for row in data]
    practices = [row[2] for row in data]
    tests = [row[3] for row in data]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, videos, label='–í–∏–¥–µ–æ', marker='o')
    plt.plot(dates, practices, label='–ü—Ä–∞–∫—Ç–∏–∫–∞', marker='s')
    plt.plot(dates, tests, label='–¢–µ—Å—Ç—ã', marker='^')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
    plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è')
    plt.legend()
    plt.grid()
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    filename = f"chart_{user_id}.png"
    plt.savefig(filename)
    plt.close()
    return filename

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.chat.id,))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, 
                    "üìö –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                    reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
def progress(message):
    data = calculate_time(message.chat.id)
    user_data = get_user_data(message.chat.id)
    
    progress_text = f"""
üìä *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*:  
üé• *–í–∏–¥–µ–æ*: `{user_data["videos"]["done"]}/{user_data["videos"]["total"]}` (–æ—Å—Ç–∞–ª–æ—Å—å {data["videos_left"]})  
üìù *–ü—Ä–∞–∫—Ç–∏–∫–∞*: `{user_data["practices"]["done"]}/{user_data["practices"]["total"]}` (–æ—Å—Ç–∞–ª–æ—Å—å {data["practices_left"]})  
üìã *–¢–µ—Å—Ç—ã*: `{user_data["tests"]["done"]}/{user_data["tests"]["total"]}` (–æ—Å—Ç–∞–ª–æ—Å—å {data["tests_left"]})  

‚è≥ *–î–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞*: `{data["days_left"]}`  
üîç *–£—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*: `-{data["days_left"] - data["effective_days"]} –¥–Ω–µ–π`  
‚è± *–û–±—â–µ–µ –≤—Ä–µ–º—è*: `~{data["total_time_hours"]:.1f} —á`  
üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–æ*: `~{data["daily_min"]:.1f} –º–∏–Ω/–¥–µ–Ω—å`  

üí° *–°–æ–≤–µ—Ç*: {'–¢—ã –≤–ø–µ—Ä–µ–¥–∏ –≥—Ä–∞—Ñ–∏–∫–∞! üéâ' if data["daily_min"] < 30 else '–°—Ç–æ–∏—Ç —É—Å–∫–æ—Ä–∏—Ç—å—Å—è! üî•'}
    """
    bot.send_message(message.chat.id, progress_text, parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "üìà –ì—Ä–∞—Ñ–∏–∫")
def send_chart(message):
    filename = generate_progress_chart(message.chat.id)
    if filename:
        with open(filename, 'rb') as chart:
            bot.send_photo(message.chat.id, chart)
        os.remove(filename)
    else:
        bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç!")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_daily_reminder():
    conn = sqlite3.connect('study_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()
    
    for user in users:
        data = calculate_time(user[0])
        msg = f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*: —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ —É–¥–µ–ª–∏—Ç—å —É—á–µ–±–µ ~{data['daily_min']:.1f} –º–∏–Ω—É—Ç!\n_–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:_"
        bot.send_message(user[0], msg, 
                         parse_mode="Markdown", 
                         reply_markup=create_confirmation_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "confirm")
def handle_confirmation(call):
    bot.answer_callback_query(call.id, "–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™")
    bot.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!", call.message.chat.id, call.message.message_id)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.add_job(send_daily_reminder, 'cron', hour=10, minute=0)
scheduler.start()

bot.polling()