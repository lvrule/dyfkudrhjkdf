# server.py - –ø–æ–ª–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import sqlite3
import logging
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from threading import Thread
import time
import hashlib
import secrets

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE = 'pc_control.db'
API_PORT = 8080
API_SECRET = secrets.token_hex(16)  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è API
ADMIN_IDS = [5276367440]  # –í–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
api = FastAPI()

class ServerBot:
    def __init__(self, token):
        self.token = token
        self.app = ApplicationBuilder().token(self.token).build()
        self.setup_handlers()
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        c.execute('''CREATE TABLE IF NOT EXISTS devices
                    (id TEXT PRIMARY KEY,
                     name TEXT,
                     ip TEXT,
                     os TEXT,
                     last_seen TIMESTAMP,
                     is_online INTEGER DEFAULT 0)''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users
                    (user_id INTEGER PRIMARY KEY,
                     username TEXT)''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–∞–Ω–¥
        c.execute('''CREATE TABLE IF NOT EXISTS commands
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     device_id TEXT,
                     command TEXT,
                     status TEXT DEFAULT 'pending',
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     FOREIGN KEY(device_id) REFERENCES devices(id))''')
        
        conn.commit()
        conn.close()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞"""
        self.app.add_handlers([
            CommandHandler("start", self.start_command),
            CommandHandler("devices", self.list_devices_command),
            CommandHandler("help", self.help_command),
            CallbackQueryHandler(self.callback_handler),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler)
        ])

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users VALUES (?, ?)", 
                 (user_id, update.effective_user.username))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "üñ•Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/devices - —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )

    async def list_devices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /devices"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        c.execute("SELECT id, name, ip, is_online FROM devices")
        devices = c.fetchall()
        conn.close()
        
        if not devices:
            await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
            
        keyboard = []
        for device in devices:
            device_id, name, ip, is_online = device
            status = "üü¢" if is_online else "üî¥"
            btn_text = f"{status} {name} ({ip})"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"device_{device_id}")])
        
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("device_"):
            device_id = query.data[7:]
            await self.show_device_actions(query, device_id)
        elif query.data.startswith("action_"):
            parts = query.data[7:].split("_")
            device_id = parts[0]
            action = "_".join(parts[1:])
            await self.handle_device_action(query, device_id, action)

    async def show_device_actions(self, query, device_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        c.execute("SELECT name, is_online FROM devices WHERE id=?", (device_id,))
        device = c.fetchone()
        conn.close()
        
        if not device:
            await query.edit_message_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        name, is_online = device
        status = "–æ–Ω–ª–∞–π–Ω" if is_online else "–æ—Ñ—Ñ–ª–∞–π–Ω"
        
        keyboard = []
        if is_online:
            actions = [
                ("üñ• –°–∫—Ä–∏–Ω—à–æ—Ç", "screenshot"),
                ("üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞", "webcam"),
                ("üîå –í—ã–∫–ª—é—á–∏—Ç—å", "shutdown"),
                ("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "reboot"),
                ("‚å®Ô∏è –ö–æ–º–∞–Ω–¥–∞", "custom_cmd")
            ]
            for text, action in actions:
                keyboard.append([InlineKeyboardButton(text, callback_data=f"action_{device_id}_{action}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_devices")])
        
        await query.edit_message_text(
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {name}\n–°—Ç–∞—Ç—É—Å: {status}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_device_action(self, query, device_id, action):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        conn = sqlite3.connect(DATABASE)
        c = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
        c.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                 (device_id, action))
        command_id = c.lastrowid
        conn.commit()
        conn.close()
        
        await query.edit_message_text(f"–ö–æ–º–∞–Ω–¥–∞ '{action}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app.run_polling()

# API endpoints
@api.post("/register")
async def register_device(request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    data = await request.json()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if request.headers.get("X-Auth-Token") != API_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    c.execute('''INSERT OR REPLACE INTO devices 
                (id, name, ip, os, last_seen, is_online)
                VALUES (?, ?, ?, ?, datetime('now'), 1)''',
              (data['device_id'], data['system_info']['name'],
               data['system_info']['ip'], data['system_info']['os']))
    
    conn.commit()
    conn.close()
    
    return JSONResponse({"status": "success"})

@api.post("/heartbeat")
async def heartbeat(request: Request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    data = await request.json()
    
    if request.headers.get("X-Auth-Token") != API_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("UPDATE devices SET last_seen=datetime('now'), is_online=1 WHERE id=?",
              (data['device_id'],))
    conn.commit()
    conn.close()
    
    return JSONResponse({"status": "success"})

@api.get("/commands")
async def get_commands(device_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    if request.headers.get("X-Auth-Token") != API_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º pending –∫–æ–º–∞–Ω–¥—ã
    c.execute("SELECT id, command FROM commands WHERE device_id=? AND status='pending'",
             (device_id,))
    commands = [{"id": row[0], "command": row[1]} for row in c.fetchall()]
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ
    if commands:
        c.execute("UPDATE commands SET status='executing' WHERE id IN ({})".format(
            ",".join(str(cmd['id']) for cmd in commands)))
        conn.commit()
    
    conn.close()
    
    return JSONResponse({"commands": commands})

@api.post("/command_result")
async def command_result(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = await request.json()
    
    if request.headers.get("X-Auth-Token") != API_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("UPDATE commands SET status=? WHERE id=?",
              ("success" if data['success'] else "failed", data['command_id']))
    conn.commit()
    conn.close()
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    
    return JSONResponse({"status": "success"})

def run_api():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(api, host="0.0.0.0", port=API_PORT)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    api_thread = Thread(target=run_api, daemon=True)
    api_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    bot = ServerBot("8060699147:AAEawF_dYzDuEA7lqF_FHCuHsujuMwF4r8k")
    
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. API —Å–µ–∫—Ä–µ—Ç: {API_SECRET}")
    print(f"API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://95.163.84.18:{API_PORT}")
    
    bot.run()