# server.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import sqlite3
import logging
import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from threading import Thread
import secrets
import socket
import requests
import base64
import os
from datetime import datetime

bot_instance = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE = 'pc_control.db'
API_PORT = 4443
ADMIN_IDS = [5276367440]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
api = FastAPI()

def is_port_in_use(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

class ServerBot:
    def __init__(self, token):
        self.token = token
        self.application = ApplicationBuilder().token(self.token).build()
        self.setup_handlers()
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS devices
                        (device_id TEXT PRIMARY KEY,
                         name TEXT,
                         ip TEXT,
                         os TEXT,
                         last_seen TIMESTAMP,
                         is_online INTEGER DEFAULT 0)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS users
                        (user_id INTEGER PRIMARY KEY,
                         username TEXT)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS commands
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         device_id TEXT,
                         command TEXT,
                         status TEXT DEFAULT 'pending',
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handlers([
            CommandHandler("start", self.start_command),
            CommandHandler("devices", self.list_devices_command),
            CommandHandler("refresh", self.refresh_devices_command),
            CallbackQueryHandler(self.callback_handler)
        ])

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT OR IGNORE INTO users VALUES (?, ?)", 
                       (user_id, update.effective_user.username))
        
        await update.message.reply_text(
            "üñ•Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/devices - —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "/refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        )

    async def refresh_devices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("UPDATE devices SET is_online=0")
            c = conn.cursor()
            c.execute("SELECT device_id FROM devices")
            devices = c.fetchall()
        
        if not devices:
            await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
            
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        await self.list_devices_command(update, context)

    async def list_devices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /devices"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute("SELECT device_id, name, ip, is_online FROM devices")
            devices = c.fetchall()
        
        if not devices:
            await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return
            
        keyboard = [
            [InlineKeyboardButton(
                f"{'üü¢' if is_online else 'üî¥'} {name} ({ip})",
                callback_data=f"device_{device_id}"
            )]
            for device_id, name, ip, is_online in devices
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_devices")])
        
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
            
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "refresh_devices":
            await self.refresh_devices_command(query.message, context)
        elif query.data.startswith("device_"):
            await self.handle_device_action(query, query.data[7:])
        elif query.data.startswith("action_"):
            parts = query.data.split("_")
            device_id = parts[1]
            action = parts[2]
            
            if action == "screenshot":
                await self.handle_screenshot_command(query, device_id)
            elif action == "shutdown":
                await self.handle_shutdown_command(query, device_id)
            elif action == "reboot":
                await self.handle_reboot_command(query, device_id)
            elif action == "lock":
                await self.handle_lock_command(query, device_id)
            elif action == "sleep":
                await self.handle_sleep_command(query, device_id)
            elif action == "cmd":
                await self.handle_cmd_command(query, device_id)
            elif action == "processes":
                await self.handle_processes_command(query, device_id)
            elif action == "killprocess":
                await self.handle_kill_process_command(query, device_id)
        elif query.data == "back_to_devices":
            await self.list_devices_command(query.message, context)

    async def handle_device_action(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        with sqlite3.connect(DATABASE) as conn:
            c = conn.cursor()
            c.execute("SELECT name, is_online FROM devices WHERE device_id=?", (device_id,))
            device = c.fetchone()
        
        if not device:
            await query.edit_message_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        name, is_online = device
        
        if is_online:
            keyboard = [
                [InlineKeyboardButton("üñ• –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"action_{device_id}_screenshot")],
                [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", callback_data=f"action_{device_id}_processes")],
                [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data=f"action_{device_id}_killprocess")],
                [InlineKeyboardButton("‚å®Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"action_{device_id}_cmd")],
                [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"action_{device_id}_lock")],
                [InlineKeyboardButton("üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º", callback_data=f"action_{device_id}_sleep")],
                [InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"action_{device_id}_shutdown")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=f"action_{device_id}_reboot")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_devices")]
            ]
            await query.edit_message_text(
                f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {name}\n–°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(
                f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {name} –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_devices")]]
                ))

    async def handle_screenshot_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "screenshot"))
        
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É. –û–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_shutdown_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "shutdown"))
        
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_reboot_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "reboot"))
        
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_lock_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "lock"))
        
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_sleep_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "sleep"))
        
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_cmd_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CMD"""
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async def handle_processes_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("INSERT INTO commands (device_id, command) VALUES (?, ?)",
                       (device_id, "processes"))
        
        await query.edit_message_text(
            "–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )

    async def handle_kill_process_command(self, query, device_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"device_{device_id}")]
            ])
        )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –ø—Ä–æ—Ü–µ—Å—Å–∞

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

# API Endpoints
@api.post("/register")
async def register_device(request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    data = await request.json()
    
    with sqlite3.connect(DATABASE) as conn:
        conn.execute('''INSERT OR REPLACE INTO devices 
                      (device_id, name, ip, os, last_seen, is_online)
                      VALUES (?, ?, ?, ?, datetime('now'), 1)''',
                   (data['device_id'], data['system_info']['name'],
                    data['system_info']['ip'], data['system_info']['os']))
    
    return {"status": "success"}

@api.post("/heartbeat")
async def heartbeat(request: Request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    data = await request.json()
    
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE devices SET last_seen=datetime('now'), is_online=1 WHERE device_id=?",
                   (data['device_id'],))
    
    return {"status": "success"}

@api.get("/commands")
async def get_commands(device_id: str, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    with sqlite3.connect(DATABASE) as conn:
        c = conn.cursor()
        c.execute("SELECT id, command FROM commands WHERE device_id=? AND status='pending'",
                 (device_id,))
        commands = [{"id": row[0], "command": row[1]} for row in c.fetchall()]
        
        if commands:
            c.execute("UPDATE commands SET status='executing' WHERE id IN ({})".format(
                ",".join(str(cmd['id']) for cmd in commands)))
    
    return {"commands": commands}

@api.post("/command_result")
async def command_result(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = await request.json()
    device_id = data['device_id']
    command_id = data['command_id']
    result = data['result']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_IDS:
        try:
            await bot_instance.application.bot.send_message(
                chat_id=admin_id,
                text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n\n{result}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("UPDATE commands SET status='completed' WHERE id=?",
                   (command_id,))
    
    return {"status": "success"}

@api.post("/upload_screenshot")
async def upload_screenshot(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    data = await request.json()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data = base64.b64decode(data['image'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"screenshots/{data['device_id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    os.makedirs("screenshots", exist_ok=True)
    
    with open(filename, "wb") as f:
        f.write(image_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_IDS:
        try:
            await bot_instance.application.bot.send_photo(
                chat_id=admin_id,
                photo=image_data,
                caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {data['device_id']}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    return {"status": "success"}

def run_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    if is_port_in_use(API_PORT):
        logger.error(f"–ü–æ—Ä—Ç {API_PORT} —É–∂–µ –∑–∞–Ω—è—Ç!")
        return
    
    config = uvicorn.Config(
        api,
        host="0.0.0.0",
        port=API_PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    server.run()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
    try:
        external_ip = requests.get('https://api.ipify.org').text
        print(f"–í–∞—à –≤–Ω–µ—à–Ω–∏–π IP: {external_ip}")
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP")
    
    if is_port_in_use(API_PORT):
        print(f"–û—à–∏–±–∫–∞: –ü–æ—Ä—Ç {API_PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    api_thread = Thread(target=run_api_server, daemon=True)
    api_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = ServerBot("8060699147:AAEawF_dYzDuEA7lqF_FHCuHsujuMwF4r8k")
        global bot_instance
        bot_instance = bot
        print(f"\n–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:{API_PORT}")
        print(f"–í–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å: http://{external_ip}:{API_PORT}")
        bot.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()